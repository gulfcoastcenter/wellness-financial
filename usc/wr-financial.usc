'4/8
'add call to _ELIGSTR in report mode

%define true 1
%define false 0

%version 01.0.001 04/08/14 GCC

start wr-financial(parmfile, option, client, retcode)

parmfile          is x
option            is x
client            is x
retcode           is b

%include gcc_groups
editmode          is n

'client info
c.dst[]           is x
c.dst.val[]       is x
c.dst.new[]       is x

c.address[]       is x
c.address.val[]   is x
c.address.new[]   is x

'responsible party
rp.dst[]          is x
rp.val[]          is x
rp.new[]          is x

fs.dst[]          is x
fs.val[]          is x
fs.new[]          is x

ic.dst[]          is x
ic.val[]          is x
ic.new[]          is x

mail.dst[]        is x
mail.val[]        is x
mail.new[]        is x

'service array
services[]        is x

template          is x
report            is x
form-view         is x
report-view       is x

l-c.dst           is b
l-c.address       is b
l-rp.dst          is b
l-fs.dst          is b
l-ic.dst          is b
l-client          is b
l-mail.dst        is b

c.el              is r
c.el.fs           is b
c.el.ef.dt        is d
c.el.la.dt        is d

el_rec[]          is n
el_effd[]         is d
el_fs[]           is b
el_ef[]           is d
el_la[]           is d

data              is x
delimstring       is x

i                 is b
rc                is b
bool              is b     '0 = false, 1 = true
snapID           is x
elig_str          is x
fin_date          is d
ReportID          is x

'rmi variables
rmi-lib           is b
rmi-client        is x
rmi-first         is x
rmi-first-dst     is x
rmi-last          is x
rmi-last-dst      is x
rmi-street        is x
rmi-street-dst    is x
rmi-street2       is x
rmi-street2-dst   is x
rmi-city          is x
rmi-city-dst      is x
rmi-city-desc     is x
rmi-citydesc-dst  is x
rmi-state         is x
rmi-state-dst     is x
rmi-zip           is x
rmi-zip-dst       is x

on rmi "putNewAddress" do putNewAddress(rmi-lib, 
   rmi-client,
   rmi-street, rmi-street-dst,
   rmi-street2, rmi-street2-dst,
   rmi-city, rmi-city-dst,
   rmi-city-desc, rmi-citydesc-dst,
   rmi-state, rmi-state-dst,
   rmi-zip, rmi-zip-dst)

on rmi "putNewRp" do putNewRp(rmi-lib, 
   rmi-client,
   rmi-first, rmi-first-dst,
   rmi-last, rmi-last-dst,
   rmi-street, rmi-street-dst,
   rmi-street2, rmi-street2-dst,
   rmi-city, rmi-city-dst,
   rmi-state, rmi-state-dst,
   rmi-zip, rmi-zip-dst)

ReportID = "WRFINA"
   %include inc_sysLibDef
gosub __INIT


'uhp template
do while 1 = 1
   gosub _PRE
   'uhp(template)
   uhp(form-view)
   
   select $endbutton
      case "CANCEL" return
      case "SUBMIT"  gosub _VALIDATE
   endselect
   
enddo

return

_PRE:
   gosub _READADDRESS
   gosub _ELIGSTR
   gosub _BROWSERDATA
goback

_ELIGSTR:
   $clear(elig_str)
   rc = $dbReadToArray(2,client,c.el,c.el.fs,c.el.ef.dt,c.el.la.dt,
      el_rec[],el_effd[],el_fs[],,el_ef[],,el_la[])
   
   i = 0
   elig_str = "<table class='tight' width='100%'>"
      + "<TR class='datatag'>"
      + "<TD>FS</TD>"
      + "<TD>Desc</TD>"
      + "<TD>Eff Date</TD>"
      + "<TD>Lapse</TD>"
      + "</TR>"
   do while i++ < $maxarray(el_effd[])
      if el_la[i] !dp or el_la[i] >= $today then
         elig_str += "<TR>"
            + "<TD>" + $fmt(el_fs[i],"LZZZ9") + "</TD>"
            + "<TD>" + $fs(el_fs[i],"D") + "</TD>"
            + "<TD>" + $fmt(el_ef[i],"MM/DD/YY") + "</TD>"
            + "<TD>" + $fmt(el_la[i],"MM/DD/YY") + "</TD>"
            + "</TR>"
      endif
   enddo
   elig_str += "</TABLE>"
goback

_VALIDATE:
   'do validation
   'gosub _CALCFS
   
   'if validated
   gosub _ELIGSTR
   'uhp(report)
   uhp(report-view)
   select $endbutton
      case "CANCEL" 
        or "SUBMIT" goback
      case other
         snapID = snap_handle:sn_GetSnapID() 
         if snapID dp then
            'success
            gosub _WRITE
            '$brmsg("snapID success post_WRITE",1,"CW")
            rc = snap_handle:sn_viewLatest(ReportID,,client,2,$ScriptID)
            return
         else
            'fail
            $brmsg("snap fail",1,"CW")
            goback
         endif
   endselect
goback

'_CALCFS:
'goback

_WRITE:
   
   'don't add layers for standalone dsts
   removeSame(c.dst.val[], c.dst.new[], c.dst[])
   if $maxarray(c.dst[]) > 0 then
      rc = l-c.dst:add(client, c.dst[], c.dst.new[])
   endif
   
   'only add record layers when something has changed
   bool = hasChanged(c.address.val[], c.address.new[])
   if (bool = true) then
      rc = l-c.address:add(client,c.address[], c.address.new[])
   endif
   
   bool = hasChanged(rp.val[], rp.new[])
   if (bool = true) then
      rc = l-rp.dst:add(client,rp.dst[], rp.new[])
   endif
   
   bool = hasChanged(mail.val[], mail.new[])
   if (bool = true) then
      rc = l-mail.dst:add(client,mail.dst[], mail.new[])
   endif

   removeSame(ic.val[], ic.new[], ic.dst[])
   if $maxarray(ic.dst[]) > 0 then
      rc = l-ic.dst:add(client, ic.dst[], ic.new[])
   endif
goback


__INIT:
   fin_date = $today
   if it_staff = "Y" then
      editmode = 4
   elseif billing_staff = "Y" then
      editmode = 3
   elseif benefit_advisor = "Y" then
      editmode = 2
   else
      editmode = 1
   endif

   if option = "_FIN" and client dp then
      "lib_FINELIG":get_elig(client,,editmode)
      ', checked, editmode)
      return
   endif
   
   'default the var names
   'template = "/c1/FRSH/CUST/forms/wr-financial.uhp"
   template = "wr-financial.uhp"
   'report = "/c1/FRSH/CUST/forms/wr-financial-rpt.uhp"
   report = "wr-financial-rpt.uhp"
   
   'use c.dst for standalone client dsts
   i = 0
   c.dst[++i] = "C.FN"
   c.dst[++i] = "C.LN"
   c.dst[++i] = "C.BD"
   c.dst[++i] = "C.SSN"
   c.dst[++i] = "C.SEX"
   
   'client address record
   i = 0
   c.address[++i] = "C.ADDR1"
   c.address[++i] = "C.ADDR2"
   c.address[++i] = "C.CITY"
   c.address[++i] = "C.CITY.DESC"
   c.address[++i] = "C.STATE"
   c.address[++i] = "C.ZIP"
   c.address[++i] = "C.AREACODE"
   c.address[++i] = "C.TEL"
   
   i = 0
   'mailing address record
   mail.dst[++i] = "C.ML.ADDR1"
   mail.dst[++i] = "C.ML.ADDR2"
   mail.dst[++i] = "C.ML.CITY"
   mail.dst[++i] = "C.ML.CITY.DESC"
   mail.dst[++i] = "C.ML.STATE"
   mail.dst[++i] = "C.ML.ZIP"

   'responsible party record
   i = 0
   rp.dst[++i] = "C.RP.FN"
   rp.dst[++i] = "C.RP.LN"
   rp.dst[++i] = "C.RP.ADDR1"
   rp.dst[++i] = "C.RP.ADDR2"
   rp.dst[++i] = "C.RP.CITY"
   rp.dst[++i] = "C.RP.STATE"
   rp.dst[++i] = "C.RP.ZIP"
   rp.dst[++i] = "C.RP.TEL"
   
   i = 0
   fs.dst[++i] = "C.EL.EF.DT"
   fs.dst[++i] = "C.EL.LA.DT"
   fs.dst[++i] = "C.EL.ID.1"
   fs.dst[++i] = "C.EL.FS"
   fs.dst[++i] = "C.EL.DISC"
   fs.dst[++i] = "C.EG.INSLN"
   fs.dst[++i] = "C.EG.INSA1"
   fs.dst[++i] = "C.EG.INSA2"
   fs.dst[++i] = "C.EG.INSCY"
   fs.dst[++i] = "C.EG.INSZP"
   fs.dst[++i] = "C.EG.INSPH"
   
   i = 0
   ic.dst[++i] = "C.INCOME"
   ic.dst[++i] = "C.FAM.SIZE"
   ic.dst[++i] = "C.FIN.INT"
   ic.dst[++i] = "C.WR.TIER"
   
   getparm(parmfile)
   getoption(option)
   
   form-view = "lib_uhp":checkfile(template)
   report-view = "lib_uhp":checkfile(report)

   if form-view !dp then return endif
   if report-view !dp then return endif

   (void)$loadlib(l-client, "lib_CLIENT")
   'get the regid
   if l-client:pickClient(client,"Y") > 0 then return endif
   
   'read
   if $loadlib(l-c.dst, "lib_DST") > 0 then return endif
   if $loadlib(l-c.address, "lib_DST") > 0 then return endif
   if $loadlib(l-rp.dst, "lib_DST") > 0 then return endif
   if $loadlib(l-mail.dst, "lib_DST") > 0 then return endif
   'if $loadlib(l-fs.dst, "lib_DST") > 0 then return endif
   if $loadlib(l-ic.dst, "lib_DST") > 0 then return endif
   
   'standalone records
   rc = l-c.dst:read(client, c.dst[])
   c.dst.val[] = l-c.dst:dst(c.dst[])
   c.dst.new[] = c.dst.val[]
   
   'client address
   gosub _READADDRESS

   'responsible party
   gosub _READRP
   
   'eligibility record
   'rc = l-fs.dst:read(client, fs.dst[])
   'fs.val[] = l-fs.dst:dst(fs.dst[])
   'fs.new[] = fs.val[]
   
   rc = l-ic.dst:read(client, ic.dst[])
   ic.val[] = l-ic.dst:dst(ic.dst[])
   ic.new[] = ic.val[]

goback

_READADDRESS:
   rc = l-c.address:read(client, c.address[])
   c.address.val[] = l-c.address:dst(c.address[])
   if (c.address.new[] !dp) then
      c.address.new[] = c.address.val[]
   endif
goback

_READMAIL:
   rc = l-mail.dst:read(client, mail.dst[])
   mail.val[] = l-mail.dst:dst(mail.dst[])
   if (mail.new[] !dp) then
      mail.new[] = mail.val[]
   endif
goback

_READRP:
   rc = l-rp.dst:read(client, rp.dst[])
   rp.val[] = l-rp.dst:dst(rp.dst[])
   if rp.new[] !dp then
      rp.new[] = rp.val[]
   endif
goback

_BROWSERDATA: 
   'send some json data to the browser
   data = "<script>"
   data += "var gcc = {};"
   data += "gcc.data = {clientid: '" + client + "', "
   data += "address: {"
   data += "lib: " + l-c.address + ", " 
   rc = $putds(c.address[], delimstring, ",", x"22")
   data += "dsts: [" + delimstring + "],"
   rc = $putds(c.address.new[], delimstring, ",", x"22")
   data += "vals: [" + delimstring + "]"
   data += "},"
   data += "mail: {"
   data += "lib: " + l-mail.dst + ", " 
   rc = $putds(mail.dst[], delimstring, ",", x"22")
   data += "dsts: [" + delimstring + "],"
   rc = $putds(mail.new[], delimstring, ",", x"22")
   data += "vals: [" + delimstring + "]"
   data += "},"
   data += "rp: {"
   data += "lib: " + l-rp.dst + ","
   rc = $putds(rp.dst[], delimstring, ",", x"22")
   data += "dsts: [" + delimstring + "],"
   rc = $putds(rp.new[], delimstring, ",", x"22")
   data += "vals: [" + delimstring + "]"
   data += "}"
   data += "};"
   data += "</script>"
goback
end wr-financial

%include inc_GetParm
%include inc_GetOption
%include inc_uhp

dynamic FUNCTION putNewRp(-lib, -client, 
   -first, -first-dst,
   -last, -last-dst,
   -street, -street-dst,
   -street2, -street2-dst,
   -city, -city-dst,
   -state, -state-dst,
   -zip, -zip-dst
) is b

-lib           is b
-client        is x
-first         is x
-last          is x
-street        is x
-street2       is x
-city          is x
-state         is x
-zip           is x
-first-dst     is x
-last-dst      is x
-street-dst    is x
-street2-dst   is x
-city-dst      is x
-state-dst     is x
-zip-dst       is x

rc             is b
rp-dsts[] is x
rp-vals[] is x

rc = $arrpush(rp-dsts[], -first-dst)
rc = $arrpush(rp-dsts[], -last-dst)
rc = $arrpush(rp-dsts[], -street-dst)
rc = $arrpush(rp-dsts[], -city-dst)
rc = $arrpush(rp-dsts[], -state-dst)
rc = $arrpush(rp-dsts[], -zip-dst)

rc = $arrpush(rp-vals[], -first)
rc = $arrpush(rp-vals[], -last)
rc = $arrpush(rp-vals[], -street)
rc = $arrpush(rp-vals[], -city)
rc = $arrpush(rp-vals[], -state)
rc = $arrpush(rp-vals[], -zip)

rc = -lib:add(-client, rp-dsts[], rp-vals[])

putNewRp = rc

end putNewRp

dynamic FUNCTION putNewAddress(-lib, -client, 
   -street, -street-dst,
   -street2, -street2-dst,
   -city, -city-dst,
   -city-desc, -city-desc-dst,
   -state, -state-dst,
   -zip, -zip-dst
) is b

-lib           is b
-client        is x
-street        is x
-street2       is x
-city          is x
-city-desc     is x
-state         is x
-zip           is x
-street-dst    is x
-street2-dst   is x
-city-dst      is x
-city-desc-dst is x
-state-dst     is x
-zip-dst       is x

rc             is b
address-dsts[] is x
address-vals[] is x

rc = 0
address-dsts[++rc] = -street-dst
address-dsts[++rc] = -street2-dst
address-dsts[++rc] = -city-dst
address-dsts[++rc] = -city-desc-dst
address-dsts[++rc] = -state-dst
address-dsts[++rc] = -zip-dst

rc = 0
address-vals[++rc] = -street
address-vals[++rc] = -street2
address-vals[++rc] = -city
address-vals[++rc] = -city-desc
address-vals[++rc] = -state
address-vals[++rc] = -zip

rc = -lib:add(-client, address-dsts[],address-vals[])

putNewAddress = rc

end putNewAddress

dynamic FUNCTION hasChanged(original[], new[]) is b
original[]     is x
new[]          is x

i              is b

i = 0
do while i++ < $maxarray(original[])
   if original[i] != new[i] then
      hasChanged = 1
      return
   endif
enddo

end hasChanged

dynamic FUNCTION removeSame(original[], new[], dst[]) is x
original[]     is x
new[]          is x
dst[]          is x
i              is b

$allowupdate(new[], dst[])

i = 0
do while i++ < $maxarray(original[])
   if original[i] = new[i] then
      '(void)$arrRemove(new[i], 1, dst[i])
      $clear(new[i], dst[i])
   endif
enddo
'$arrCompress(new[])
'$arrCompress(dst[])
end removeSame
